"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumRemoteDebugger = require("appium-remote-debugger");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _iosPerformanceLog = _interopRequireDefault(require("../device-log/ios-performance-log"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

const NATIVE_WIN = 'NATIVE_APP';
const WEBVIEW_WIN = 'WEBVIEW';
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
const commands = {},
      helpers = {},
      extensions = {};

commands.getCurrentContext = async function getCurrentContext() {
  if (this.curContext && this.curContext !== NATIVE_WIN) {
    return `${WEBVIEW_BASE}${this.curContext}`;
  }

  return NATIVE_WIN;
};

extensions.getContextsAndViews = async function getContextsAndViews(useUrl = true) {
  _logger.default.debug('Retrieving contexts and views');

  let webviews = await this.listWebFrames(useUrl);
  let ctxs = [{
    id: NATIVE_WIN,
    view: {}
  }];
  this.contexts = [NATIVE_WIN];

  for (let view of webviews) {
    ctxs.push({
      id: `${WEBVIEW_BASE}${view.id}`,
      view
    });
    this.contexts.push(view.id.toString());
  }

  return ctxs;
};

extensions.useNewSafari = function useNewSafari() {
  return parseFloat(this.iosSdkVersion) >= 8.1 && parseFloat(this.opts.platformVersion) >= 8.1 && !this.isRealDevice() && this.opts.safari;
};

extensions.typeAndNavToUrl = async function typeAndNavToUrl() {
  let address = this.opts.address ? this.opts.address : '127.0.0.1';
  this.setCurrentUrl(this.caps.safariInitialUrl || `http://${address}:${this.opts.port}/welcome`);
  let tries = 0;
  const MAX_TRIES = 2;

  let navigate = async () => {
    let oldImpWait = this.implicitWaitMs;
    this.implicitWaitMs = 7000;
    let el = await (0, _asyncbox.retryInterval)(3, 1000, async () => await this.findElement('accessibility id', 'URL'));
    this.implicitWaitMs = oldImpWait;

    try {
      await this.nativeTap(el.ELEMENT);
    } catch (err) {
      if (_lodash.default.includes(err.message, 'could not be tapped')) {
        if (tries++ >= MAX_TRIES) throw err;
        let newPageButton = await this.findElement('xpath', "//XCUIElementTypeButton[contains(@name,'New page')]");
        await this.nativeTap(newPageButton.ELEMENT);
        return await navigate();
      } else {
        throw err;
      }
    }

    try {
      let el = await this.findElement('class name', 'XCUIElementTypeTextField');
      await this.setValueImmediate(this.getCurrentUrl(), el);
    } catch (err) {
      if (tries++ >= MAX_TRIES) throw err;
      return await navigate();
    }

    try {
      el = await this.findElement('accessibility id', 'Go');
      await this.nativeTap(el.ELEMENT);
    } catch (err) {
      if (_lodash.default.includes(err.message, 'could not be tapped')) {
        _logger.default.error('Unable to submit URL because \'Go\' button could not be tapped. ' + 'Please make sure your keyboard is toggled on.');
      }

      throw err;
    }

    await this.navToViewWithTitle(undefined, new RegExp(this.getCurrentUrl(), 'i'));
    await this.remote.pageUnload();
  };

  await navigate();
};

extensions.navToViewThroughFavorites = async function navToViewThroughFavorites() {
  _logger.default.debug('We are on iOS7+ simulator: clicking apple button to get into a webview');

  let oldImpWait = this.implicitWaitMs;
  this.implicitWaitMs = 7000;
  let el;

  try {
    el = await this.findElement('xpath', '//XCUIElementTypeScrollView[1]/XCUIElementTypeButton[1]');
  } catch (err) {
    let msg = 'Could not find button to click to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);

    this.implicitWaitMs = oldImpWait;
    return await this.navToViewWithTitle(/.*/i);
  }

  this.implicitWaitMs = oldImpWait;

  try {
    await this.nativeTap(el.ELEMENT);
  } catch (err) {
    let msg = 'Could not click button to get into webview. ' + 'Proceeding on the assumption we have a working one.';

    _logger.default.error(msg);
  }

  await this.navToViewWithTitle(/apple/i);
};

extensions.navToViewWithTitle = async function navToViewWithTitle(titleRegex, urlRegExp) {
  _logger.default.debug('Navigating to most recently opened webview');

  let start = Date.now();
  let spinTime = 500;

  let spinHandles = async () => {
    let res;

    try {
      res = await this.getLatestWebviewContextForTitle(titleRegex || urlRegExp);
    } catch (err) {
      if (!err.message.includes('Could not connect to a valid app after')) {
        const error = new Error(`Could not navigate to webview! Err: ${err.message}`);
        error.stack += `\nCaused by: ${err.stack}`;
        throw error;
      }

      _logger.default.debug('Could not navigate to webview. Retrying if possible.');
    }

    if (res) {
      let latestWindow = res;

      _logger.default.debug(`Picking webview '${latestWindow}'`);

      await this.setContext(latestWindow);
      await this.remote.cancelPageLoad();
      return;
    }

    if (Date.now() - start >= 90000) {
      throw new Error('Could not navigate to webview; there are none!');
    }

    _logger.default.warn('Could not find any webviews yet, refreshing/retrying');

    if (this.isRealDevice() || !this.opts.safari) {
      await _bluebird.default.delay(spinTime);
      return await spinHandles();
    }

    let element;

    try {
      _logger.default.debug('Finding and tapping reload button');

      element = await this.findUIElementOrElements('accessibility id', 'ReloadButton', '', false);
      await this.nativeTap(element.ELEMENT);
    } catch (err) {
      _logger.default.warn(`Error finding and tapping reload button: ${err.message}`);

      _logger.default.warn('Retrying.');

      await _bluebird.default.delay(spinTime);
    }

    return await spinHandles();
  };

  await spinHandles();
};

helpers.stopRemote = async function stopRemote(closeWindowBeforeDisconnecting = false) {
  if (!this.remote) {
    _logger.default.errorAndThrow('Tried to leave a web frame but were not in one');
  }

  if (closeWindowBeforeDisconnecting) {
    await this.closeWindow();
  }

  await this.remote.disconnect();
  this.curContext = null;
  this.curWebFrames = [];
  this.curWebCoords = null;
  this.remote = null;
};

helpers.setCurrentUrl = function setCurrentUrl(url) {
  this._currentUrl = url;
};

helpers.getCurrentUrl = function getCurrentUrl() {
  return this._currentUrl;
};

extensions.closeAlertBeforeTest = async function closeAlertBeforeTest() {
  return true;
};

extensions.navToInitialWebview = async function navToInitialWebview() {
  if (this.useNewSafari()) {
    await this.typeAndNavToUrl();
  } else if (!this.isRealDevice() && this.opts.safari) {
    await this.navToViewThroughFavorites();
  } else {
    await this.navToViewWithTitle(/.*/);
  }
};

extensions.getLatestWebviewContextForTitle = async function getLatestWebviewContextForTitle(regExp) {
  const currentUrl = this.getCurrentUrl();

  const contexts = _lodash.default.filter(await this.getContextsAndViews(), 'view');

  if (currentUrl) {
    for (const ctx of contexts) {
      if ((ctx.view.url || '') === this.getCurrentUrl()) {
        return ctx.id;
      }
    }
  }

  for (const ctx of contexts) {
    if (ctx.view.title && regExp.test(ctx.view.title) || ctx.view.url && regExp.test(ctx.view.url)) {
      return ctx.id;
    }
  }
};

extensions.isWebContext = function isWebContext() {
  return !!this.curContext && this.curContext !== NATIVE_WIN;
};

extensions.isWebview = function isWebview() {
  return this.isWebContext();
};

extensions.getNewRemoteDebugger = async function getNewRemoteDebugger() {
  let socketPath;

  if (!this.isRealDevice()) {
    socketPath = await this.opts.device.getWebInspectorSocket();
  }

  return (0, _appiumRemoteDebugger.createRemoteDebugger)({
    bundleId: this.opts.bundleId,
    additionalBundleIds: this.opts.additionalWebviewBundleIds,
    isSafari: this.isSafari(),
    includeSafari: this.opts.includeSafariInWebviews,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    socketPath,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _appiumSupport.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : false,
    udid: this.opts.udid,
    logAllCommunication: this.opts.safariLogAllCommunication,
    logAllCommunicationHexDump: this.opts.safariLogAllCommunicationHexDump,
    socketChunkSize: this.opts.safariSocketChunkSize,
    webInspectorMaxFrameLength: this.opts.safariWebInspectorMaxFrameLength
  }, this.isRealDevice());
};

commands.setContext = async function setContext(name, callback, skipReadyCheck) {
  function alreadyInContext(desired, current) {
    return desired === current || desired === null && current === NATIVE_WIN || desired === NATIVE_WIN && current === null;
  }

  function isNativeContext(context) {
    return context === NATIVE_WIN || context === null;
  }

  if (name && name.id) {
    name = name.id;
  }

  _logger.default.debug(`Attempting to set context to '${name || NATIVE_WIN}' from '${this.curContext ? this.curContext : NATIVE_WIN}'`);

  if (alreadyInContext(name, this.curContext) || alreadyInContext(_lodash.default.replace(name, WEBVIEW_BASE, ''), this.curContext)) {
    _logger.default.debug(`Already in '${name || NATIVE_WIN}' context. Doing nothing.`);

    return;
  }

  if (isNativeContext(name)) {
    this.curContext = null;
    return;
  }

  if (_lodash.default.isUndefined(this.contexts)) {
    await this.getContexts();
  }

  let contextId = _lodash.default.replace(name, WEBVIEW_BASE, '');

  if (contextId === '') {
    contextId = this.contexts[1];
  }

  if (!_lodash.default.includes(this.contexts, contextId)) {
    throw new _appiumBaseDriver.errors.NoSuchContextError();
  }

  const oldContext = this.curContext;
  this.curContext = this.curWindowHandle = contextId;

  const [appIdKey, pageIdKey] = _lodash.default.map(contextId.split('.'), id => parseInt(id, 10));

  try {
    this.selectingNewPage = true;
    await this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck);
  } catch (err) {
    this.curContext = this.curWindowHandle = oldContext;
    throw err;
  } finally {
    this.selectingNewPage = false;
  }

  if (this.opts.enablePerformanceLogging && this.remote) {
    _logger.default.debug(`Starting performance log on '${this.curContext}'`);

    this.logs.performance = new _iosPerformanceLog.default(this.remote);
    await this.logs.performance.startCapture();
  }

  if (name && name !== NATIVE_WIN && this.logs) {
    if (this.logs.safariConsole) {
      await this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole));
    }

    if (this.logs.safariNetwork) {
      await this.remote.startNetwork(this.logs.safariNetwork.addLogLine.bind(this.logs.safariNetwork));
    }
  }
};

extensions.connectToRemoteDebugger = async function connectToRemoteDebugger() {
  this.remote = await this.getNewRemoteDebugger();
  this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));
  this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_FRAMES_DETACHED, () => {
    if (!_lodash.default.isEmpty(this.curWebFrames)) {
      _logger.default.debug(`Clearing ${_appiumSupport.util.pluralize('frame', this.curWebFrames.length, true)}: ${this.curWebFrames.join(', ')}`);
    }

    this.curWebFrames = [];
  });
  await this.remote.connect(this.opts.webviewConnectTimeout);
};

extensions.listWebFrames = async function listWebFrames(useUrl = true) {
  if (!this.opts.bundleId) {
    _logger.default.errorAndThrow('Cannot enter web frame without a bundle ID');
  }

  useUrl = useUrl && !this.isRealDevice() && !!this.getCurrentUrl();

  _logger.default.debug(`Selecting by url: ${useUrl} ${useUrl ? `(expected url: '${this.getCurrentUrl()}')` : ''}`);

  const currentUrl = useUrl ? this.getCurrentUrl() : undefined;
  let pageArray = [];

  const getWebviewPages = async () => {
    try {
      return await this.remote.selectApp(currentUrl, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
    } catch (err) {
      _logger.default.debug(`No available web pages: ${err.message}`);

      return [];
    }
  };

  if (this.remote && this.remote.appIdKey) {
    pageArray = await getWebviewPages();
  } else {
    if (!this.remote) {
      await this.connectToRemoteDebugger();
    }

    await this.remote.setConnectionKey();
    pageArray = await getWebviewPages();
    const alertErrorMsg = 'Close alert failed. Retry.';

    try {
      await (0, _asyncbox.retryInterval)(6, 1000, async () => {
        if (!(await this.closeAlertBeforeTest())) {
          throw new Error(alertErrorMsg);
        }
      });
    } catch (err) {
      if (err.message !== alertErrorMsg) {
        _logger.default.errorAndThrow(err);
      }
    }
  }

  if (pageArray.length === 0) {
    _logger.default.debug('No web frames found.');
  }

  return pageArray;
};

commands.getContexts = async function getContexts() {
  _logger.default.debug('Getting list of available contexts');

  const contexts = await this.getContextsAndViews(false);
  const mapFn = this.opts.fullContextList ? function (context) {
    return {
      id: context.id.toString(),
      title: context.view.title,
      url: context.view.url,
      bundleId: context.view.bundleId
    };
  } : context => context.id.toString();
  return contexts.map(mapFn);
};

extensions.mobileGetContexts = async function mobileGetContexts(opts = {}) {
  let {
    waitForWebviewMs = 0
  } = opts;

  if (!_lodash.default.isNumber(waitForWebviewMs)) {
    waitForWebviewMs = parseInt(waitForWebviewMs, 10);

    if (isNaN(waitForWebviewMs)) {
      waitForWebviewMs = 0;
    }
  }

  const curOpt = this.opts.fullContextList;
  this.opts.fullContextList = true;
  const timer = new _appiumSupport.timing.Timer().start();

  try {
    let contexts;

    do {
      contexts = await this.getContexts();

      if (contexts.length >= 2) {
        _logger.default.debug(`Found webview context after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);

        return contexts;
      }

      _logger.default.debug(`No webviews found in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    } while (timer.getDuration().asMilliSeconds < waitForWebviewMs);

    return contexts;
  } finally {
    this.opts.fullContextList = curOpt;
  }
};

commands.setWindow = async function setWindow(name, skipReadyCheck) {
  try {
    await this.setContext(name, _lodash.default.noop, skipReadyCheck);
  } catch (err) {
    throw (0, _appiumBaseDriver.isErrorType)(err, _appiumBaseDriver.errors.NoSuchContextError) ? new _appiumBaseDriver.errors.NoSuchWindowError() : err;
  }
};

commands.getWindowHandle = async function getWindowHandle() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  _logger.default.debug(`Getting current window handle`);

  return this.curContext;
};

commands.getWindowHandles = async function getWindowHandles() {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  _logger.default.debug('Getting list of available window handles');

  const contexts = await this.getContextsAndViews(false);
  return contexts.filter(context => context.id !== NATIVE_WIN).map(context => context.view.id.toString());
};

extensions.onPageChange = async function onPageChange(pageChangeNotification) {
  _logger.default.debug(`Remote debugger notified us of a new page listing: ${JSON.stringify(pageChangeNotification)}`);

  if (this.selectingNewPage) {
    _logger.default.debug('We are in the middle of selecting a page, ignoring');

    return;
  }

  if (!this.remote || !this.remote.isConnected) {
    _logger.default.debug('We have not yet connected, ignoring');

    return;
  }

  const {
    appIdKey,
    pageArray
  } = pageChangeNotification;
  let newIds = [];
  let newPages = [];
  let keyId = null;

  function isUrlIgnored(url, safariIgnoreWebHostnames) {
    const ignoredHosts = (safariIgnoreWebHostnames || '').split(',').map(b => b.trim()).filter(b => !_lodash.default.isEmpty(b));

    for (const ignoredHost of ignoredHosts) {
      if (ignoredHost === 'about:blank' && url === 'about:blank') {
        return true;
      } else {
        try {
          const hostname = new URL(url).hostname;

          if (hostname === ignoredHost) {
            return true;
          }
        } catch (ign) {}
      }
    }

    return false;
  }

  for (const page of pageArray) {
    const id = page.id.toString();
    newIds.push(id);

    if (page.isKey) {
      keyId = id;
    }

    const contextId = `${appIdKey}.${id}`;

    if (!_lodash.default.includes(this.contexts, contextId)) {
      if (isUrlIgnored(page.url, this.opts.safariIgnoreWebHostnames)) {
        _logger.default.info(`Not tracking '${page.url}' page because it is blacklisted. ` + `'safariIgnoreWebHostnames'=${this.opts.safariIgnoreWebHostnames}`);
      } else {
        newPages.push(id);
        this.contexts.push(contextId);
      }
    }
  }

  if (!keyId) {
    _logger.default.debug('No key id found. Choosing first id from page array');

    keyId = newIds[0] || null;
  }

  if (!_appiumSupport.util.hasValue(this.curContext)) {
    _logger.default.debug('We do not appear to have window set yet, ignoring');

    return;
  }

  const [curAppIdKey, curPageIdKey] = this.curContext.split('.');

  if (curAppIdKey !== appIdKey) {
    _logger.default.debug('Page change not referring to currently selected app, ignoring.');

    return;
  }

  let newPage = null;

  if (newPages.length) {
    newPage = _lodash.default.last(newPages);

    _logger.default.debug(`We have new pages, selecting page '${newPage}'`);
  } else if (!_lodash.default.includes(newIds, curPageIdKey)) {
    _logger.default.debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');

    if (!_appiumSupport.util.hasValue(keyId)) {
      _logger.default.error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');

      this.setCurrentUrl(undefined);
      return;
    }

    _logger.default.debug(`Debugger already selected page '${keyId}', ` + `confirming that choice.`);

    this.curContext = `${appIdKey}.${keyId}`;
    newPage = keyId;
  } else {
    _logger.default.debug('Checking if page needs to load');

    const needsPageLoad = (() => {
      const contextArray = _lodash.default.map(pageArray, page => `${appIdKey}.${page.id}`);

      return !_lodash.default.isEqual(_lodash.default.find(this.contexts, this.curContext), _lodash.default.find(contextArray, this.curContext));
    })();

    if (needsPageLoad) {
      _logger.default.debug('Page load needed. Loading...');

      await this.remote.pageLoad();
    }

    _logger.default.debug('New page listing is same as old, doing nothing');
  }

  if (_appiumSupport.util.hasValue(this.curContext)) {
    let currentPageId = parseInt(_lodash.default.last(this.curContext.split('.')), 10);

    let page = _lodash.default.find(pageArray, p => parseInt(p.id, 10) === currentPageId);

    if (page && page.url !== this.getCurrentUrl()) {
      _logger.default.debug(`Redirected from '${this.getCurrentUrl()}' to '${page.url}'`);

      this.setCurrentUrl(page.url);
    }
  }

  if (_appiumSupport.util.hasValue(newPage)) {
    this.selectingNewPage = true;
    const oldContext = this.curContext;
    this.curContext = `${appIdKey}.${newPage}`;
    this.remote.selectPage(appIdKey, parseInt(newPage, 10)).catch(err => {
      _logger.default.warn(`Failed to select page: ${err.message}`);

      this.curContext = oldContext;
    });
    this.selectingNewPage = false;
  }

  this.windowHandleCache = pageArray;
};

Object.assign(commands, extensions, helpers);
var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
